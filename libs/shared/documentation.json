{
    "pipes": [],
    "interfaces": [
        {
            "name": "TimeLeft",
            "id": "interface-TimeLeft-176bb76f4fc1af2d206d9840a61048d4f52f41bdb39bd84574316bae63041dc43e2dfb19be5f7218a1b12a9d5dd80f1dad4997cf0097ed5b0519e988e675cc12",
            "file": "libs/shared/src/lib/timer/timer.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, AfterContentInit } from '@angular/core';\nimport { Timer, TimerStatus } from './timer.models';\n\ninterface TimeLeft {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n@Component({\n  selector: 'time-tracker-timer',\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.scss'],\n})\nexport class TimerComponent implements AfterContentInit {\n  /**\n   * @ignore\n   */\n  _startTime?: number;\n\n  /**\n   * @ignore\n   */\n  _endTime?: number;\n\n  /**\n   * @ignore\n   */\n  _duration = 0;\n\n  /**\n   * @ignore\n   */\n  _status: TimerStatus = TimerStatus.indeterminate;\n\n  /**\n   * @ignore\n   */\n  _timerLength = 0;\n\n  _mainTimerLength = 0;\n\n  _overtimeTimerLength = 0;\n\n  // get mainTimerLength() {\n  //   return\n  // }\n\n  // get overtimeTimerLength() {\n  //   return\n  // }\n\n  /**\n   * @ignore\n   * stores the circumference of the circle based on the contents of the component\n   */\n  _totalLength = 0;\n\n  /**\n   * @ignore\n   */\n  _timeLeft: TimeLeft = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  };\n\n  _timerStatus = TimerStatus;\n\n  constructor(private element: ElementRef<HTMLDivElement>) { }\n\n  /**\n   * @ignore\n   */\n  ngAfterContentInit(): void {\n    this._totalLength = Math.PI * this.element.nativeElement.clientWidth;\n    this.resetTimerLengths();\n  }\n\n  @Input()\n  set timer(value: Timer) {\n    console.log('set timer reached!');\n    switch (value.type) {\n      case 'countdown':\n        if (value.endTime) {\n          this._status = TimerStatus.complete;\n        } else if (value.startTime && Date.now() - value.startTime.getTime() > value.duration) {\n          this._status = TimerStatus.overtime;\n        } else if (value.startTime) {\n          this._status = TimerStatus.started;\n        } else {\n          this._status = TimerStatus.notStarted;\n        }\n\n        this._startTime = value.startTime?.getTime();\n        this._endTime = value.endTime?.getTime();\n        this._duration = value.duration;\n        this.resetTimerLengths();\n        break;\n      case 'complete':\n        this._status = TimerStatus.complete;\n        break;\n      case 'indeterminate':\n        this._status = TimerStatus.indeterminate;\n        break;\n    }\n\n    this.resetStatus();\n  }\n\n  /**\n   * @ignore\n   * I actually would suggest calling this \"tick\", since it's not necessarily\n   * doing much with resetting the status except for in very few instances;\n   * additionally, since you suggest that this is a dumb component, the\n   * ticking probably should exist and be managed on a timer object and this\n   * updates with the changes in that object\n   */\n  private resetStatus = (): void => {\n    switch (this._status) {\n      case TimerStatus.notStarted:\n        this._timerLength = 0;\n        this.resetTimerLengths();\n        break;\n      case TimerStatus.started:\n      case TimerStatus.overtime: {\n        // most of the counting here was changed from counting down from 360 to counting up\n        this._timerLength = this._startTime ? Date.now() - this._startTime : 0;\n        this.resetTimerLengths();\n        const msLeft = this._duration - this._timerLength;\n\n        // this probably should be taken out of this component if it's supposed to be dumb/display-only...\n        if (this._timerLength - this._duration >= 0 && this._status != TimerStatus.overtime) {\n          this._status = TimerStatus.overtime;\n        }\n        else if (this._timerLength >= this._duration * 2) {\n          this._status = TimerStatus.complete;\n        }\n\n        this._timeLeft = {\n          hours: Math.floor(Math.abs(msLeft) / 3600000),\n          minutes: Math.floor((Math.abs(msLeft) % 3600000) / 60000),\n          seconds: Math.floor((Math.abs(msLeft) % 60000) / 1000)\n        };\n\n        // using `requestAnimationFrame` because the `setTimeout` was\n        // still making it look choppy and despite being set to 250ms,\n        // it was only ticking once per second; this smoothed it out\n        // dramatically\n        requestAnimationFrame(this.resetStatus);\n\n        break;\n      }\n      case TimerStatus.complete:\n        this._timeLeft = {\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        };\n\n        break;\n      case TimerStatus.indeterminate:\n        this._timerLength = 0;\n        this.resetTimerLengths();\n        this._timeLeft = {\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        };\n        break;\n    }\n  }\n\n  resetTimerLengths(): void {\n    const nonzeroDuration = this._duration ? this._duration : 1;\n    this._mainTimerLength = Math.min(this._timerLength / nonzeroDuration, 1) * this._totalLength;\n    this._overtimeTimerLength = Math.min(Math.max(this._timerLength - this._duration, 0) / nonzeroDuration, 1) * this._totalLength;\n  }\n}\n",
            "properties": [
                {
                    "name": "hours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-5f39b3fdb6fd713c98adb4437699da319e65c2863467960a53f146c9b2ba990f95eae2e2d1b1c4ecb82675b8e4e82bec00b443f96c242a7319477990099bec0e",
            "file": "libs/shared/src/lib/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "time-tracker-status",
            "styleUrls": [
                "./status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'time-tracker-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss'],\n})\nexport class StatusComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./status.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>status works!</p>\n"
        },
        {
            "name": "TimerComponent",
            "id": "component-TimerComponent-176bb76f4fc1af2d206d9840a61048d4f52f41bdb39bd84574316bae63041dc43e2dfb19be5f7218a1b12a9d5dd80f1dad4997cf0097ed5b0519e988e675cc12",
            "file": "libs/shared/src/lib/timer/timer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "time-tracker-timer",
            "styleUrls": [
                "./timer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "Timer",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_mainTimerLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "_overtimeTimerLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "_timerStatus",
                    "defaultValue": "TimerStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [
                {
                    "name": "resetTimerLengths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, AfterContentInit } from '@angular/core';\nimport { Timer, TimerStatus } from './timer.models';\n\ninterface TimeLeft {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n@Component({\n  selector: 'time-tracker-timer',\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.scss'],\n})\nexport class TimerComponent implements AfterContentInit {\n  /**\n   * @ignore\n   */\n  _startTime?: number;\n\n  /**\n   * @ignore\n   */\n  _endTime?: number;\n\n  /**\n   * @ignore\n   */\n  _duration = 0;\n\n  /**\n   * @ignore\n   */\n  _status: TimerStatus = TimerStatus.indeterminate;\n\n  /**\n   * @ignore\n   */\n  _timerLength = 0;\n\n  _mainTimerLength = 0;\n\n  _overtimeTimerLength = 0;\n\n  // get mainTimerLength() {\n  //   return\n  // }\n\n  // get overtimeTimerLength() {\n  //   return\n  // }\n\n  /**\n   * @ignore\n   * stores the circumference of the circle based on the contents of the component\n   */\n  _totalLength = 0;\n\n  /**\n   * @ignore\n   */\n  _timeLeft: TimeLeft = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  };\n\n  _timerStatus = TimerStatus;\n\n  constructor(private element: ElementRef<HTMLDivElement>) { }\n\n  /**\n   * @ignore\n   */\n  ngAfterContentInit(): void {\n    this._totalLength = Math.PI * this.element.nativeElement.clientWidth;\n    this.resetTimerLengths();\n  }\n\n  @Input()\n  set timer(value: Timer) {\n    console.log('set timer reached!');\n    switch (value.type) {\n      case 'countdown':\n        if (value.endTime) {\n          this._status = TimerStatus.complete;\n        } else if (value.startTime && Date.now() - value.startTime.getTime() > value.duration) {\n          this._status = TimerStatus.overtime;\n        } else if (value.startTime) {\n          this._status = TimerStatus.started;\n        } else {\n          this._status = TimerStatus.notStarted;\n        }\n\n        this._startTime = value.startTime?.getTime();\n        this._endTime = value.endTime?.getTime();\n        this._duration = value.duration;\n        this.resetTimerLengths();\n        break;\n      case 'complete':\n        this._status = TimerStatus.complete;\n        break;\n      case 'indeterminate':\n        this._status = TimerStatus.indeterminate;\n        break;\n    }\n\n    this.resetStatus();\n  }\n\n  /**\n   * @ignore\n   * I actually would suggest calling this \"tick\", since it's not necessarily\n   * doing much with resetting the status except for in very few instances;\n   * additionally, since you suggest that this is a dumb component, the\n   * ticking probably should exist and be managed on a timer object and this\n   * updates with the changes in that object\n   */\n  private resetStatus = (): void => {\n    switch (this._status) {\n      case TimerStatus.notStarted:\n        this._timerLength = 0;\n        this.resetTimerLengths();\n        break;\n      case TimerStatus.started:\n      case TimerStatus.overtime: {\n        // most of the counting here was changed from counting down from 360 to counting up\n        this._timerLength = this._startTime ? Date.now() - this._startTime : 0;\n        this.resetTimerLengths();\n        const msLeft = this._duration - this._timerLength;\n\n        // this probably should be taken out of this component if it's supposed to be dumb/display-only...\n        if (this._timerLength - this._duration >= 0 && this._status != TimerStatus.overtime) {\n          this._status = TimerStatus.overtime;\n        }\n        else if (this._timerLength >= this._duration * 2) {\n          this._status = TimerStatus.complete;\n        }\n\n        this._timeLeft = {\n          hours: Math.floor(Math.abs(msLeft) / 3600000),\n          minutes: Math.floor((Math.abs(msLeft) % 3600000) / 60000),\n          seconds: Math.floor((Math.abs(msLeft) % 60000) / 1000)\n        };\n\n        // using `requestAnimationFrame` because the `setTimeout` was\n        // still making it look choppy and despite being set to 250ms,\n        // it was only ticking once per second; this smoothed it out\n        // dramatically\n        requestAnimationFrame(this.resetStatus);\n\n        break;\n      }\n      case TimerStatus.complete:\n        this._timeLeft = {\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        };\n\n        break;\n      case TimerStatus.indeterminate:\n        this._timerLength = 0;\n        this.resetTimerLengths();\n        this._timeLeft = {\n          hours: 0,\n          minutes: 0,\n          seconds: 0\n        };\n        break;\n    }\n  }\n\n  resetTimerLengths(): void {\n    const nonzeroDuration = this._duration ? this._duration : 1;\n    this._mainTimerLength = Math.min(this._timerLength / nonzeroDuration, 1) * this._totalLength;\n    this._overtimeTimerLength = Math.min(Math.max(this._timerLength - this._duration, 0) / nonzeroDuration, 1) * this._totalLength;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$translucent-white: rgba(255, 255, 255, 0.8);\r\n$transparent-white: rgba(255, 255, 255, 0);\r\n$translucent-red: rgba(255, 0, 0, 0.8);\r\n\r\n:host {\r\n  --main-timer-length: 0;\r\n  --overtime-timer-length: 0;\r\n  --total-length: 942.278;\r\n  display: block;\r\n  width: max-content;\r\n\r\n  ::ng-deep .status-container > :not(svg) {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n\r\n.status-container {\r\n  position: relative;\r\n  width: max-content;\r\n  height: max-content;\r\n\r\n  circle {\r\n    fill: transparent;\r\n    stroke-width: 300px;\r\n    border-radius: 50%;\r\n    transform: rotate(-90deg);\r\n    transition: stroke-dasharray linear 100ms;\r\n  }\r\n\r\n  svg {\r\n    transform: scaleX(-1);\r\n    position: relative;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .main {\r\n    stroke-dasharray: var(--main-timer-length) var(--total-length);\r\n    stroke: $translucent-white;\r\n  }\r\n  .overtime {\r\n    stroke-dasharray: var(--overtime-timer-length) var(--total-length);\r\n    stroke: $translucent-red;\r\n  }\r\n}\r\n",
                    "styleUrl": "./timer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLDivElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLDivElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "timer": {
                    "name": "timer",
                    "setSignature": {
                        "name": "timer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Timer",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Timer",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\n  class=\"status-container\"\n  [class.overtime]=\"_status === _timerStatus.overtime\"\n  [style.--main-timer-length]=\"_mainTimerLength\"\n  [style.--overtime-timer-length]=\"_overtimeTimerLength\"\n  [style.--total-length]=\"_totalLength\">\n  <ng-content></ng-content>\n  <svg width=\"300\" height=\"300\">\n    <defs>\n      <circle id=\"circle-overlay\" r=\"150\"></circle>\n    </defs>\n\n    <use x=\"150\" y=\"150\" href=\"#circle-overlay\" class=\"main\" />\n    <use x=\"150\" y=\"150\" href=\"#circle-overlay\" class=\"overtime\" />\n  </svg>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/src/lib/timer/timer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  render: (args: TimerComponent) => ({\n    props: args,\n    template: `<time-tracker-timer [timer]=\"timer\"><img width=\"200\" height=\"200\" src=\"https://yt3.ggpht.com/a-/AAuE7mC75lyDOGkH_0L4_ZR6F4bfGviFjsMZIGa22w=s900-mo-c-c0xffffffff-rj-k-no\" /></time-tracker-timer>`\n  }),\n  args: {\n    timer: {\n      type: 'countdown',\n      startTime: new Date(Date.now()),\n      duration: 30000\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/shared/src/lib/status/status.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  render: (args: StatusComponent) => ({\n    props: args,\n  }),\n  args: {},\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "libs/shared/src/lib/timer/timer.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/src/lib/timer/timer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  render: (args: TimerComponent) => ({\n    props: args,\n    template: `<time-tracker-timer [timer]=\"timer\"><img width=\"200\" height=\"200\" src=\"https://yt3.ggpht.com/a-/AAuE7mC75lyDOGkH_0L4_ZR6F4bfGviFjsMZIGa22w=s900-mo-c-c0xffffffff-rj-k-no\" /></time-tracker-timer>`\n  }),\n  args: {\n    timer: {\n      type: 'countdown',\n      startTime: new Date(Date.now()),\n      duration: 30000\n    },\n  },\n}"
                }
            ],
            "libs/shared/src/lib/status/status.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/shared/src/lib/status/status.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  render: (args: StatusComponent) => ({\n    props: args,\n  }),\n  args: {},\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "libs/shared/src/lib/status/status.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/src/lib/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/src/lib/timer/timer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/shared/src/lib/timer/timer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/shared/src/lib/timer/timer.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeLeft",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}